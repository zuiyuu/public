returnMsg.append("输出项目[" + str(rownum) + "]行[" + str(colnum) + "]列的内容没有找到对应的信息，请确认.")


 if (self.selectInputfilepath == ''):
            winmsg = "请选择工作目录和出力文件"
            result = showinfo('提示', winmsg)
            self.runbutton['state'] = tk.NORMAL
            return
        
        if (r_value.get() == 1) :
            # 参数2是【0】表示从新做成所有转换文件
            pdfminerTools.mainPdfTools(self.selectInputfilepath,'0')
        elif (r_value.get() == 2) :
            # 参数2是【1】表示不从新做成已有转换文件
            pdfminerTools.mainPdfTools(self.selectInputfilepath,'1')
            

# 主处理
# 参数1：工作目录指定
# 参数2：是否从新做成标志
def mainPdfTools(inputPath,newflag):
    workDirectory = inputPath
    
    # 希查看是否已经存在备份目录，如果有则删除，没有则新建目录
    paralpDirectory = "%s\\%s" %(workDirectory,ruleFileName)
    
    basePath = "base"
    baseParalpDirectory = "%s\\%s" %( workDirectory + basePath,ruleFileName)

    # 拷贝原始规则文件
    shutil.copy(baseParalpDirectory, paralpDirectory)
    
    # exeFlag  0 全部执行  1 pdf 转 Txt  2 检索关键字  3 读取规则文件
    exeFlag = 0
    if (exeFlag == 0 or exeFlag == 1) :
        folderList,fileList,fileNameList = getFiledList(workDirectory,'.pdf')
        # 根据文件类型匹配所需要的文件，把文件索引信息映射到对应的文件名
        retmsg = setPdfFileToExcel(fileNameList , paralpDirectory)
        if (len(retmsg) > 0):
            print(retmsg)
            # return
            # 处理中出现错误，停止处理
            exit()

        # pdf文件内容转换
        pdfconvThread(newflag)

        folderList,fileList,fileNameList = getFiledList(workDirectory,'.xlsx')
        # 根据文件类型匹配所需要的文件，把文件索引信息映射到对应的文件名
        retmsg = setPdfFileToExcel(fileNameList , paralpDirectory)
        if (len(retmsg) > 0):
            print(retmsg)
            # return
            # 处理中出现错误，停止处理
            exit()
            
        # 检查所需要的所有入力文件是否存在
        errorMsgList = checkSetPdfFileToExcel(paralpDirectory)
        if (len(errorMsgList) > 0):
            print(errorMsgList)
            # return
            # 处理中出现错误，停止处理
            exit()
            
        # 根据filetype设定文件名
        setInputFileName(paralpDirectory)

    # 根据读取规则文件，添补所需信息
    if (exeFlag == 0 or exeFlag == 3) :
        # 1，先处理EXCEL文件信息读取
        readsetExcel(paralpDirectory,workDirectory)

        # 2，再处理PDF文件信息读取
        ruleList,outList = readPdf(paralpDirectory)
        setPdfData(ruleList,outList,workDirectory)

    time2 = time.time()
    print("总共消耗时间为:", time2 - time1)
